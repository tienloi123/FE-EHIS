import React, { useContext, useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import './Header.css';
import bellIcon from '../../assets/icons/bell-icon.png';
import Avatar from '../../assets/icons/avatar.jpg';
import Eye from '../../assets/icons/eye.png';
import Up from '../../assets/icons/eye2.png';
import axiosClient from './../../axiosClient';
import { AuthContext } from '../../context/AuthContext';
import ToastNotify from '../common/ToastNotify';
import { toast } from 'react-toastify';
import { Popover, Badge, Segmented, Button ,Tooltip, List} from 'antd';
import Pusher from 'pusher-js';
import MarkAsRead from '../../assets/icons/mark-all-as-read.png';

export const Header = () => {
  const { isLoggedIn, logout, role, user, user_id } = useContext(AuthContext);
  const navigate = useNavigate();
  const [menuOpen, setMenuOpen] = useState(false);
  const [bookingMenuOpen, setBookingMenuOpen] = useState(false);
  const [appointmentMenuOpen, setAppointmentMenuOpen] = useState(false);
  const [messageCount, setMessageCount] = useState(0);  // S·ªë l∆∞·ª£ng th√¥ng b√°o
  const [notifications, setNotifications] = useState([]); // Danh s√°ch th√¥ng b√°o
  const [expandedNotification, setExpandedNotification] = useState(null);


  const fetchNotifications = async () => {
    if (!isLoggedIn) {
      setNotifications([]);  // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, x√≥a th√¥ng b√°o
      setMessageCount(0);
      return;
    }

    try {
      const response = await axiosClient.get('/notification/get_all'); // ƒê·∫£m b·∫£o r·∫±ng API n√†y tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng
      if (response.data && Array.isArray(response.data)) {
        setNotifications(response.data);
        console.log(response.data)
        setMessageCount(response.data.filter(notificationItem => !notificationItem.is_seen).length); // ƒê·∫øm s·ªë l∆∞·ª£ng th√¥ng b√°o
      }
    } catch (error) {
      console.error("L·ªói khi l·∫•y th√¥ng b√°o:", error);
    }
  };
  const handleSegmentChange = async (value) => {
    if (value === 'T·∫•t c·∫£') {
      try {
        const response = await axiosClient.get('/notification/get_all'); // ƒê·∫£m b·∫£o r·∫±ng API n√†y tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng
        if (response.data && Array.isArray(response.data)) {
          setNotifications(response.data);
          console.log(response.data)
          setMessageCount(response.data.filter(notificationItem => !notificationItem.is_seen).length); // ƒê·∫øm s·ªë l∆∞·ª£ng th√¥ng b√°o
        }
      } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng b√°o:", error);
      }
    } else if (value === 'Ch∆∞a ƒë·ªçc') {
      try {
        const response = await axiosClient.get('/notification/message-unread'); // ƒê·∫£m b·∫£o r·∫±ng API n√†y tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng
        if (response.data && Array.isArray(response.data)) {
          setNotifications(response.data);
          console.log(response.data)
          setMessageCount(response.data.filter(notificationItem => !notificationItem.is_seen).length); // ƒê·∫øm s·ªë l∆∞·ª£ng th√¥ng b√°o
        }
      } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng b√°o:", error);
      }
    }
  };

  const markAllAsRead = async () => {
    try {
      const response = await axiosClient.put('/notification/mark-all-as-read'); // API c·ªßa b·∫°n
      console.log('ƒê√£ ƒë√°nh d·∫•u t·∫•t c·∫£ l√† ƒë√£ ƒë·ªçc:', response.data);
      fetchNotifications();
      // C·∫≠p nh·∫≠t l·∫°i state ho·∫∑c giao di·ªán n·∫øu c·∫ßn thi·∫øt
    } catch (error) {
      console.error('L·ªói khi ƒë√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc:', error);
    }
  };
  const markAsRead = async (notificationId) => {
    try {
      // T√¨m th√¥ng b√°o c·ª• th·ªÉ trong danh s√°ch
      const notification = notifications.find((item) => item._id === notificationId);

      // N·∫øu th√¥ng b√°o ch∆∞a ƒë∆∞·ª£c ƒë·ªçc, ƒë√°nh d·∫•u l√† ƒë√£ ƒë·ªçc v√† gi·∫£m s·ªë l∆∞·ª£ng ch∆∞a ƒë·ªçc
      if (notification && !notification.is_seen) {
        await axiosClient.put(`/notification/mark-as-read/${notificationId}`, { notificationId });

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa th√¥ng b√°o trong state
        setNotifications((prevNotifications) =>
          prevNotifications.map((item) =>
            item._id === notificationId ? { ...item, is_seen: true } : item
          )
        );

        // Gi·∫£m s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
        setMessageCount((prevCount) => Math.max(prevCount - 1, 0));
      }
    } catch (error) {
      console.error("L·ªói khi ƒë√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc:", error);
    }
  };




  useEffect(() => {
    fetchNotifications();
  }, [isLoggedIn]);  // Th√™m isLoggedIn v√†o dependency ƒë·ªÉ khi tr·∫°ng th√°i thay ƒë·ªïi, th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t

  const requestNotificationPermission = async () => {
    if (Notification.permission === 'default') {
      await Notification.requestPermission();
    }
  };
  useEffect(() => {
    requestNotificationPermission();
    // Thi·∫øt l·∫≠p k·∫øt n·ªëi v·ªõi Pusher khi component ƒë∆∞·ª£c mount
    const pusher = new Pusher('fedafb8feb81afa00009', {
      cluster: 'ap1',
    });
    const channelName = `${user_id}`; // T·∫°o t√™n channel d·ª±a tr√™n ID ng∆∞·ªùi d√πng
    const channel = pusher.subscribe(channelName);

    // L·∫Øng nghe s·ª± ki·ªán 'notification' t·ª´ Pusher
    channel.bind('notification', (data) => {
      const formattedDate = new Date(data.start_date).toLocaleDateString('vi-VN', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
      });

      // L·∫•y ng√†y hi·ªán t·∫°i v√† chuy·ªÉn ƒë·ªïi th√†nh ƒë·ªãnh d·∫°ng "DD/MM/YYYY"
      const currentDate = new Date().toLocaleDateString('vi-VN', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
      });
      // Th√™m th√¥ng b√°o v√†o danh s√°ch notifications
      setNotifications((prevNotifications) => [
        {
          title: data.title,
          description: data.description,
          doctor: data.doctor,
          start_date: data.formattedDate,
          start_time: data.start_time,
          is_seen: false,
          created_at: currentDate,
        },
        ...prevNotifications,
      ]);

      setMessageCount((prevCount) => prevCount + 1);

      toast.info(
        <div className="notification-toast">
          <h4 className="toast-title">{data.title}</h4>
          <p><strong>B√°c sƒ©:</strong> {data.doctor.name}</p>
          <p><strong>Ph√≤ng kh√°m:</strong> {data.doctor.clinic_location}</p>
          <p><strong>Ng√†y kh√°m:</strong> {data.start_date}</p>
          <p><strong>Th·ªùi gian:</strong> {data.start_time}</p>
        </div>,
        {
          position: 'bottom-left',
          autoClose: 10000,
        }
      );
      // ƒê·∫©y th√¥ng b√°o l√™n tr√¨nh duy·ªát v·ªõi thi·∫øt k·∫ø h·ª£p l√Ω
      if (Notification.permission === 'granted') {
        const notification = new Notification(data.title, {
          body: `ü©∫ B√°c sƒ©: ${data.doctor.name}\nüè• Ph√≤ng kh√°m: ${data.doctor.clinic_location}\nüìÖ Ng√†y kh√°m: ${formattedDate}\n‚è∞ Th·ªùi gian: ${data.start_time}`,
          icon: '../../assets/icons/notification-icon.png', // Thay th·∫ø v·ªõi ƒë∆∞·ªùng d·∫´n t·ªõi icon c·ªßa b·∫°n
          badge: '../../assets/icons/notification-badge.png' // (n·∫øu c√≥) icon nh·ªè ·ªü g√≥c d∆∞·ªõi gi√∫p nh·∫≠n di·ªán th√¥ng b√°o
        });

        // T√πy ch·ªçn: ƒê·ªÉ th√¥ng b√°o m·ªü trang ho·∫∑c l√†m g√¨ ƒë√≥ khi ng∆∞·ªùi d√πng click v√†o
        notification.onclick = () => {
          window.focus(); // Ho·∫∑c ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang chi ti·∫øt cu·ªôc h·∫πn
        };
      } else if (Notification.permission === 'default') {
        requestNotificationPermission(); // G·ªçi l·∫°i n·∫øu ng∆∞·ªùi d√πng ch∆∞a cho ph√©p
      }


    });

    return () => {
      pusher.unsubscribe(channelName); // H·ªßy ƒëƒÉng k√Ω channel khi component b·ªã unmount
    };
  }, [user_id]);

  const handleLogout = async () => {
    try {
      await axiosClient.get('auth/bearer-jwt/logout', {
        withCredentials: true
      });
      logout();
      navigate('/login');
    } catch (error) {
    }
  };

  const handleProtectedLink = (e, link) => {
    if (!isLoggedIn) {
      e.preventDefault();
      toast.warn("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y");
    } else {
      navigate(link);
    }
  };

  const toggleNotificationDetails = (id) => {
    // G·ªçi API ƒë·ªÉ ƒë√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc khi nh·∫•n "More"
    if (expandedNotification !== id) {
      markAsRead(id);
    }
    setExpandedNotification(expandedNotification === id ? null : id);
  };

  const content = (
    <div className="popoverContent">
      <List
        dataSource={notifications}
        renderItem={(item) => (
          <List.Item key={item._id} className="popoverItem">
            <div className="popoverDetails">
              {/* ƒê·ªïi m√†u ch·∫•m n·∫øu th√¥ng b√°o ƒë√£ ƒë·ªçc */}
              {!item.is_seen ? <div className="unreadDot" /> : ''}
              <p><strong>{item.title}</strong></p>
              <p>{item.description}</p>

              {/* N·∫øu c√≥ n·ªôi dung m·ªü r·ªông */}
              {expandedNotification === item._id ? (
                <>
                  <p><strong>B√°c sƒ©:</strong> {item.doctor_name}</p>
                  <p><strong>Ng√†y kh√°m:</strong> {item.start_date}</p>
                  <p><strong>Th·ªùi gian:</strong> {item.start_time}</p>
                  <p><strong>Ph√≤ng kh√°m:</strong> {item.clinic_location}</p>
                  <Button
                    onClick={() => toggleNotificationDetails(item._id)}
                    type='text'
                    icon={<img src={Up} width={20} />}
                    className='button_detail'>
                    Hide
                  </Button>
                </>
              ) : (
                <Button
                  onClick={() => toggleNotificationDetails(item._id)}
                  icon={<img src={Eye} width={20} />}
                  className='button_detail'
                  type="text">
                  More
                </Button>
              )}
              <div className="popoverDate">
                {item.created_at}
              </div>
            </div>
          </List.Item>

        )}
      />
    </div>
  );


  return (
    <div className='containerHeader'>
      <ToastNotify />
      <div className='logoHeader'>
        <Link to="/">
          <img src="./images/logo.png" alt="logo" className='logo1' />
        </Link>
      </div>
      <div className='menuHeader'>
        <ul className='menuLi'>
          <li><Link to="/">Trang ch·ªß</Link></li>

          {role === 'Patient' ? (
            <>
              <li className='bookingMenu' onMouseEnter={() => setBookingMenuOpen(true)} onMouseLeave={() => setBookingMenuOpen(false)}>
                <span className='textcolor'>Kh√°m b·ªánh</span>
                {bookingMenuOpen && (
                  <ul className='dropdownMenu'>
                    <li><Link to="/dat-lich-kham" onClick={(e) => handleProtectedLink(e, '/dat-lich-kham')}>ƒê·∫∑t l·ªãch kh√°m</Link></li>
                    <li><Link to="/xem-lich-kham" onClick={(e) => handleProtectedLink(e, '/lich-kham-cua-toi')}>Xem l·ªãch kh√°m</Link></li>
                  </ul>
                )}
              </li>
              <li><Link to="/ho-so-benh-an" onClick={(e) => handleProtectedLink(e, '/ho-so-benh-an')}>H·ªì S∆° B·ªánh √Ån</Link></li>
              <li><Link to="/tin-tuc">Tin t·ª©c</Link></li>
            </>
          ) : role === 'Receptionist' && (
            <>
              <li className='bookingMenu' onMouseEnter={() => setAppointmentMenuOpen(true)} onMouseLeave={() => setAppointmentMenuOpen(false)}>
                <span className='textcolor'>Qu·∫£n l√Ω l·ªãch h·∫πn</span>
                {appointmentMenuOpen && (
                  <ul className='dropdownMenu'>
                    <li><Link to="/lich-hen-benh-nhan">L·ªãch h·∫πn c·ªßa b·ªánh nh√¢n</Link></li>
                    <li><Link to="/lich-lam-viec-bac-si">L·ªãch l√†m vi·ªác c·ªßa b√°c sƒ©</Link></li>
                  </ul>
                )}
              </li>
              <li><Link to="/thanh-toan">Thanh to√°n</Link></li>
            </>
          )}
        </ul>
      </div>

      {isLoggedIn ? (
        <div className='userContainer'>
          <div className='notificationContainer'>
            {/* S·ª≠ d·ª•ng Badge ƒë·ªÉ hi·ªÉn th·ªã s·ªë l∆∞·ª£ng th√¥ng b√°o */}

            <Popover
              content={content}
              title={
                <div className="notification-read-all-wrapper">
                  <span style={{ fontSize: '20px' }} className="popover-title">
                    Th√¥ng b√°o
                  </span>
                  <div className="DivMarkAsRead">
                    <Tooltip title="ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc">
                        <img src={MarkAsRead} alt="Mark as Read" className="MarkAsRead" onClick={markAllAsRead}/>
                    </Tooltip>
                    <div>
                      <Segmented
                        defaultValue='T·∫•t c·∫£'
                        options={['T·∫•t c·∫£', 'Ch∆∞a ƒë·ªçc']}
                        onChange={handleSegmentChange}
                      />
                    </div>
                  </div>
                </div>
              }
              trigger="click"
            >

              <Badge count={messageCount} offset={[-20, 10]}>
                <img src={bellIcon} alt="" className='bell_icon' />
              </Badge>
            </Popover>
          </div>
          <div className='user_name'>Xin ch√†o, {user}!</div>
          <div className='avatarContainer' onMouseEnter={() => setMenuOpen(true)} onMouseLeave={() => setMenuOpen(false)}>
            <div className='avatarWrapper'>
              <img src={Avatar} className='avatar' />
              {menuOpen && (
                <div className='dropdownMenu'>
                  <Link to="/settings">C√†i ƒë·∫∑t</Link>
                  <span onClick={handleLogout}>ƒêƒÉng xu·∫•t</span>
                </div>
              )}
            </div>
          </div>
        </div>
      ) : (
        <Link className='LoginLink' to="/login"><div className='LoginButton'>ƒêƒÉng nh·∫≠p</div></Link>
      )}
    </div>
  );
};

export default Header;
